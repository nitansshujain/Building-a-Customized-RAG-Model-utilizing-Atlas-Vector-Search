lama: hello lama: can somebody please help me, i'm trying to implement the modified booth's algorithm for multiplication, but the vhdl code gives incorrect results like 125 * 12 = 1076605135488 :D i don't know why http://pastebin.com/dKXJbsb5 lama: i have also written a quick software implementation in c++ so i would be sure that i understand the algorithm and that works: lama: http://pastebin.com/4MhLdhtA lama: so can somebody see anything wrong with the vhdl code? * jkent is now known as jkent` * jkent` is now known as jkent lama: just to make things clear, if i have two's complement number in std_logic_vector and cast this to unsigned in order to add this vector to some other vector; the casting won't alter the std_logic_vector bit format, right? lama: let say that slv = 11111011 which is -5 in two's complement and i will do unsigned(slv), will this still hold the same binary value? unsigned(slv) + unsigned(1) = 11111100 (-4) ? MatthiasM: why do you keep using std_logic_vector or unsigned for signed data?!? lama: so apparently i'm useless, that stupid c++ took me like 10 minutes, but i have already spend 2 hours trying to rewrite it in vhdl * jkent is now known as jkent` svenn: You are too intelligent for your intentions Asu: i'm a few clicks away from ordering the cyclone v gx starter Asu: starter kit scrts: you can always ignore ARM cores on FPGA gaqwas: ill ask the same question later when he's here promach: just to bother you guys with a short, simple question. Could you guys show me (beginner) an existing, simple verilog example for pipelining ? promach: https://www.edaplayground.com/x/aHv  http://i.imgur.com/B0dTDdh.png  pipeline depth of 4promach: proof-of-conceptlama: how do i check if that multiplier works? i managed to get it working, so i put some numbers and the results is correct, but shouldn't i test the output for all possible combinations?but that is 33 bit x 33 bit so the means 2^33 * 2^33 - 2^33 combinations i think, i'm not sure how i'm suppose to test that